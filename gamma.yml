---
- name: Update SLES server, manage services, and reboot if needed
  hosts: all
  become: true
  become_user: root

  vars:
    services_to_manage: []
    script_base_dir: "/root/scripts"

  pre_tasks:
    - name: Print a message about the playbook starting
      debug:
        msg: "Starting system update and reboot process if required..."

    - name: Check connectivity
      ping:
      register: ping_result

    - name: Fail if not reachable
      fail:
        msg: "Host {{ inventory_hostname }} is not reachable"
      when: ping_result.failed

    - name: Check if a reboot is required (more robust check) before patching
      shell: |
        needs_reboot=$(needs-restarting -r || echo "")
        if [[ ! -z "$needs_reboot" ]]; then
          echo "Reboot required"
        fi
      register: initial_reboot_check
      changed_when: initial_reboot_check.stdout | trim == "Reboot required"
      ignore_errors: true

    - name: Set fact if reboot is required before patching
      set_fact:
        reboot_required: "{{ initial_reboot_check.changed }}"

    - name: Display initial reboot status
      debug:
        msg: "Reboot required before patching: {{ reboot_required }}"

    - name: Stop services before patching
      debug:
        msg: "STOPPING SAP services before patching..."
      when: reboot_required # Note: This stops services only if a reboot was required *before* patching

    - name: Stop services before patching
      shell: "{{ script_base_dir }}/stopVAR.sh"
      loop: "{{ services_to_manage }}"
      register: stopped_services
      ignore_errors: true
      when: reboot_required # Note: This stops services only if a reboot was required *before* patching

  tasks:
    # NOTE: The conditions below (when: reboot_required) mean the upgrade
    # only runs if a reboot was required *before* patching. This might
    # not be the intended logic. Usually, you'd run the upgrade
    # unconditionally or based on a different variable/condition.
    # However, keeping it as per the original playbook structure for now,
    # focusing on the patches_exist error fix.

    - name: Ensure zypper is available
      package:
        name: zypper
        state: present
      when: reboot_required

    - name: Ensure zypper cache is up to date
      command: zypper refresh
      register: refresh_result
      changed_when: refresh_result.rc == 0
      when: reboot_required

    - name: Perform a full system upgrade
      zypper:
        name: '*'
        state: latest
        update_cache: yes
      register: upgrade_result
      when: reboot_required

    - name: Check if a reboot is required after upgrade
      shell: |
        needs_reboot=$(needs-restarting -r || echo "")
        if [[ ! -z "$needs_reboot" ]]; then
          echo "Reboot required"
        fi
      register: final_reboot_check
      changed_when: final_reboot_check.stdout | trim == "Reboot required"
      ignore_errors: true
      # FIX: Removed 'when: patches_exist'. This check should run after the upgrade.

    - name: Set reboot fact if required (after upgrade)
      set_fact:
        reboot_required: "{{ reboot_required or final_reboot_check.changed }}" # Combine initial and final check results

    - name: Display final reboot status
      debug:
        msg: "Reboot required after upgrade: {{ reboot_required }}"
      when: reboot_required # FIX: Changed 'when: patches_exist' to 'when: reboot_required'. Display status if reboot is needed.

    - name: Reboot the server if required
      reboot:
        msg: "Rebooting due to system updates"
      when: reboot_required
      register: reboot_result

  post_tasks:
    - name: Start services after reboot (or if no reboot was needed)
      debug:
        msg: "STARTING SAP services after reboot/patching..."
      when: not reboot_required or (reboot_required and reboot_result.changed)

    - name: Start services after reboot (or if no reboot was needed)
      shell: "{{ script_base_dir }}/startVAR.sh"
      loop: "{{ services_to_manage }}"
      when: not reboot_required or (reboot_required and reboot_result.changed)

    - name: Print a message about the playbook ending
      debug:
        msg: "System update process complete."
