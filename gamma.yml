---
- name: Update SLES server, manage services, patch, reboot, and check SAP
  hosts: all
  become: true
  become_user: root

  vars:
    services_to_manage: [] # Define your services here, e.g., ['sap', 'database']
    script_base_dir: "/root/scripts"
    # Ports to check for SAP
    sap_ports_to_check:
      - 3202
      - 50300
    # Timeout for port checks (seconds)
    sap_port_check_timeout_initial: 10
    sap_port_check_timeout_final: 60
    sap_port_check_timeout_retry: 120 # Longer timeout for final check after retry

  pre_tasks:
    - name: Print a message about the playbook starting
      debug:
        msg: "Starting system update, reboot, and SAP check process..."

    - name: Check connectivity
      ping:
      register: ping_result

    - name: Fail if not reachable
      fail:
        msg: "Host {{ inventory_hostname }} is not reachable"
      when: ping_result.failed

    # --- SAP Port Check Before Stopping ---
    - name: Check if SAP ports {{ sap_ports_to_check }} are listening before stopping services
      ansible.builtin.wait_for:
        port: "{{ item }}"
        state: started
        timeout: "{{ sap_port_check_timeout_initial }}"
      loop: "{{ sap_ports_to_check }}"
      register: initial_sap_ports_check
      ignore_errors: true # Don't fail the playbook if ports are not up initially

    - name: Set fact if SAP ports are up initially
      set_fact:
        sap_ports_up_initial: "{{ initial_sap_ports_check.results | selectattr('failed', 'equalto', false) | list | length == sap_ports_to_check | length }}"

    - name: Display initial SAP ports status
      debug:
        msg: "SAP ports were up before patching: {{ sap_ports_up_initial }}. Services will be stopped only if ports were up."

    - name: Stop services before patching (Debug message)
      debug:
        msg: "STOPPING SAP services before patching..."
      when: sap_ports_up_initial # Only stop if ports were up

    - name: Stop services before patching (Execute script)
      shell: "{{ script_base_dir }}/stopVAR.sh"
      register: stopped_services
      ignore_errors: true # Ignore if the script fails, might be because services weren't running
      when: sap_ports_up_initial # Only stop if ports were up

  tasks:
    # --- Patching ---
    - name: Ensure zypper is available
      package:
        name: zypper
        state: present
      # Runs unconditionally

    - name: Ensure zypper cache is up to date
      command: zypper refresh
      register: refresh_result
      changed_when: refresh_result.rc == 0
      # Runs unconditionally

    - name: Perform a full system upgrade
      zypper:
        name: '*'
        state: latest
        update_cache: yes
      register: upgrade_result
      # Runs unconditionally

    # --- Unconditional Reboot ---
    # Removed checks for 'reboot_required'
    - name: Reboot the server after upgrade (unconditional)
      reboot:
        msg: "Rebooting after system updates"
      register: reboot_result
      # Runs unconditionally after upgrade tasks

  post_tasks:
    - name: Print a message about post-reboot checks/starts
      debug:
        msg: "Starting post-reboot service starts and checks..."

    # --- SAP Service Start Attempt 1 ---
    # Attempt to start services unconditionally after reboot/patching
    - name: Attempt to start services after patching/reboot
      shell: "{{ script_base_dir }}/startVAR.sh"
      register: started_services_attempt_1
      ignore_errors: true # Ignore errors during start attempt itself

    # --- SAP Port Check After Start Attempt 1 ---
    - name: Wait for SAP ports {{ sap_ports_to_check }} to be listening after first start attempt
      ansible.builtin.wait_for:
        port: "{{ item }}"
        state: started
        timeout: "{{ sap_port_check_timeout_final }}"
      loop: "{{ sap_ports_to_check }}"
      register: final_sap_ports_check_1
      ignore_errors: true # Don't fail immediately, we might retry

    - name: Set fact if SAP ports are up after first start attempt
      set_fact:
        sap_ports_up_final_1: "{{ final_sap_ports_check_1.results | selectattr('failed', 'equalto', false) | list | length == sap_ports_to_check | length }}"

    - name: Display SAP ports status after first start attempt
      debug:
        msg: "SAP ports were up after first start attempt: {{ sap_ports_up_final_1 }}"

    # --- SAP Service Start Attempt 2 (Retry if needed) ---
    - name: Attempt to start services again (retry) if ports are not up
      shell: "{{ script_base_dir }}/startVAR.sh"
      register: started_services_attempt_2
      ignore_errors: true # Ignore errors during retry start attempt
      when: not sap_ports_up_final_1 # Only retry if ports were NOT up after first attempt

    # --- SAP Port Check After Start Attempt 2 ---
    - name: Wait for SAP ports {{ sap_ports_to_check }} to be listening after second start attempt
      ansible.builtin.wait_for:
        port: "{{ item }}"
        state: started
        timeout: "{{ sap_port_check_timeout_retry }}" # Use a longer timeout for the final check
      loop: "{{ sap_ports_to_check }}"
      register: final_sap_ports_check_2
      ignore_errors: true # We will use a fail task instead

    - name: Set fact if SAP ports are up after second start attempt
      set_fact:
        sap_ports_up_final_2: "{{ final_sap_ports_check_2.results | selectattr('failed', 'equalto', false) | list | length == sap_ports_to_check | length }}"

    - name: Display SAP ports status after second start attempt
      debug:
        msg: "SAP ports were up after second start attempt: {{ sap_ports_up_final_2 }}"

    # --- Final SAP Status Check and Potential Failure ---
    - name: Final check - Fail if SAP ports are NOT up after all attempts
      fail:
        msg: "CRITICAL: SAP ports {{ sap_ports_to_check }} are not listening after patching and service start attempts. Manual intervention required!"
      when: not sap_ports_up_final_2

    - name: Print a message about the playbook ending
      debug:
        msg: "System update process complete. Final SAP ports status: {{ 'UP' if sap_ports_up_final_2 else 'DOWN' }}"
